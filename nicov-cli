#!/bin/sh
name="${0##*/}"
tty="$( ps -C "$name" | sed "\$!d; s/.*pts\///; s/ .*$name//" )"
###echo "$tty"
##default variables#
version="1.10.0" ##version bump up, but i am not sure whether changes are good or bad
##next bump up, looks cleaner probably, some functions have been added
##bump up, history now is chronologic, favourites added
##bump up, tried some sed and curl stuff and now there is search option, only that but it is probably worth it
##yet again bump up, but with cost of readability of that script
##bump up, code is supposed to be cleaner now plus delete history options
##bump up, because i completed "to do" list and don't have any more ideas
##once again bump up, now code is supposed to have better syntax, compatibility with other shells, bug fixes etc.
##bump up, loop option works better but with awk and tr dependencies as sacrifice
##another bump up, because i deleted my history by using few instances of that program at once, also some noticeable changes
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
blue="\033[1;34m"
magenta="\033[1;35m"
cyan="\033[1;36m"
white="\033[1;37m"
URL=""
clean=0
nicov_history=0
loop=0
non_stop=0
arr=""
misses_diff=0
pre=0
replay=0
downloaded=0
form=0
format_change=0
switch=0
af=0
searched=0
###
match=0
dir=${HOME}/.local/share/${name}
dir_tmp=${HOME}/.cache/${name}
file_h=${dir}/${name}_history
file_h_tmp=${dir_tmp}/${name}_history_cache
file_tmp=${dir_tmp}/${name}_cache
[ ! -d "$dir" ] && mkdir -p "$dir"
[ ! -d "$dir_tmp" ] && mkdir -p "$dir_tmp"
#file_h=$HOME/.nicov_history
#file_h_tmp=$HOME/.nicov_history_cache
#file_tmp=$HOME/.nicov_cache
[ ! -f "$file_h" ] && : > "$file_h"
dep_exist=0
linking=0
prompt_big=0
search_result=0
hist_result=0
fav3=0
protection=0
###
Sm="${yellow}Sm?\n"
So="${cyan}So?\n"
Nm="${yellow}Nm?\n"
Link="${cyan}Link?\n"
Previous=""
Watch="${green}Watch[w]?\n"
Watch2="${cyan}Watch[w]?\n"
Replay="${cyan}Replay[r]?\n"
Next="${green}Next[n]?\n"
Download="${yellow}Download[d]?\n"
Format="${blue}Format[f]?\n"
Format_change="${white}Change format[c]?\n"
Switch="${green}Change URL[u]?\n"
History="${cyan}History[h]?\n"
Add_fav="${yellow}Add to favourites[a]?\n"
Search="${magenta}Search[s]?\n"
Quit="${red}Quit[q]?\n"
goodbye="${magenta}\nThanks for your cooperation\n"
###################

###dev tools
###inf="Not working"
###*

##to do:
##play from history(don't know whether it is necessary,
##because it can be just chosen and copied) #done
##watch non-stop for playlist #done
##Loop with only big_prompt #done
##changing var names to be more specific/code readability (it maybe hard with those that have only one letter) #maybe i will try to spend time on that
##loop with different sized IDs #done

help_text () {

	while read -r line; do
		printf "${red}%s\n" "$line"
	done <<-EOF
	
	USAGE:
	
	${name} [-q FORMAT] [-p ID,ID,ID,(...) | [ID],[ID],[ID],(...)] -c -s -S
	${name} [-q FORMAT] [-p ID,ID,ID,(...) | [ID][ID][ID](...)] -w -c -s -S
	${name} -h | -V | -d | -D
	
	OPTIONS:
	-h print this usage and exit
	-V print version information and exit
	-d deletes specific entry from history
	-D deletes whole history
	-q set quality video ("ID" column from format [don't confuse with videos ID])
	-p get many sm or so or nm (playlist like)
	-w play videos from "p" option without menus (require "p" option to work)
	-c unable screen cleaning (without it screen is being cleaned by default)
	-s turns off function to choose video from search results
	-S turns off function to choose video from history
	-P history protection (kills other working commands with the same name [${name}]
	to protect history from being deleted by them)

	When changing format, while program runs,
	if you press enter without writing anything
	quality will stay default
	EOF
}

info () {
	printf "${magenta}%s \033[0m\n" "$1"
}

die () {
	help_text
	printf "\033[0m\n"
	exit
}

dep_check () {
	for dependency; do
	if ! command -v "$dependency" > /dev/null; then
		printf "${red}Missing dependency: $dependency\033[0m\n"
		dep_exist=1
	fi
	done
	[ ! $dep_exist = 0 ] && exit
}

dep_check "curl" "awk" "sed" "grep" "cat" "wc" "ps" "printf" "read" "sort" "uniq" "cut" "tr" "command" "nohup" "mpv" "yt-dlp"

protect_history () {
	tmp_loop="$(($( ps -C "$name" | wc -l)-1))"
	while [ "$tmp_loop" -gt "1" ]; do
		killing="$( ps -C nicov | sed "${tmp_loop}!d" | awk '{ print $1 }' )"
		killing1="$( ps -C nicov | sed "${tmp_loop}!d" | awk '{ print $2 }' )"
		###echo "$killing"
		###echo "$killing1"
		[ ! "pts/$tty" = "$killing1" ] && kill "$killing"
		tmp_loop=$((tmp_loop-1))
	done
}

###Options handling###

while getopts 'p:cwPdDsSq:hV' OPT; do
	case $OPT in
		h) die
		;;
		V) info "Version: $version"
		exit
		;;
		q) quality="$OPTARG"
		;;
		c) clean=1
		;;
		p) arr="$OPTARG"
		###echo "a:$arr:a"
		loop=1
		;;
		s) search_result=1
		;;
		S) hist_result=1
		;;
		w) non_stop=1
		;;
		P) protection=1
		;;
		d) while read -r hist; do
		printf "${white}%s\n" "$hist"
		done < "$file_h"
		[ ! -s "$file_h" ] && printf "${magenta}There is nothing here\n" && exit
		printf "${magenta}Which one to delete?\n"
		printf "> " && read del_num
			case "$del_num" in
			''|*[!0-9]*|0) die
			;;
			*)
			n1="$(uniq $file_h | wc -l)"
			[ "$del_num" -gt "$n1" ] && printf "There is no such entry\033[0m\n" && exit
			[ "$protection" = "1" ] && protect_history
			sed "$del_num d" "$file_h" > "$file_h_tmp" && cat "$file_h_tmp" > "$file_h" && rm "$file_h_tmp"
			z="$(($n1+1))"
			while [ "$z" -gt "$del_num" ]; do
			###echo "aaaaa"
			[ "$protection" = "1" ] && protect_history
			sed "0,/$z =/ s//$(($z-1)) =/" "$file_h" > "$file_h_tmp" && cat "$file_h_tmp" > "$file_h" && rm "$file_h_tmp"
			###echo "a:$(($z-1)):$n1:a"
			z="$((z-=1))"
			done
			printf "Entry deleted\033[0m\n"
			;;
			esac
		exit
		;;
		D) [ -f "$file_h" ] && rm "$file_h" && printf "${magenta}History deleted\033[0m\n"
		exit
		;;
		*) die
		;;
	esac
done

[ "$non_stop" = "1" ] && [ "$loop" = "0" ] &&  printf "${magenta}\nWorks only with \"p\" option\n" && die

arr="$(printf "%s" "$arr" | sed "s/\[//g")"
arr="$(printf "%s" "$arr" | sed "s/\]//g")"
arr="$(printf "%s" "$arr" | sed "s/\://g")"
arr="$(printf "%s" "$arr" | sed "s/\*//g")"
###echo "a:$arr:a"
######################

url_make () {
case $x in
	0) question="$Sm"
	URL="https://www.nicovideo.jp/watch/sm$1"
	diff="sm"
	linking=0
	;;
	1) question="$So"
	URL="https://www.nicovideo.jp/watch/so$1"
	diff="so"
	linking=0
	;;
	2) question="$Nm"
	URL="https://www.nicovideo.jp/watch/nm$1"
	diff="nm"
	linking=0
	;;
	3) [ ! "$loop" = "0" ] && die
	question="$Link"
	URL="$1"
	linking=1
	match=0
	;;
	*) die
	;;
	esac
}

url_check () {
###echo "a:$URL:a"
title="$(curl -s "$URL" | grep -m 1 "property=\"og:title\"" | sed "s/.*content=//; s/\">/\"/")"
title="${title%\"*}"
title="$title\""
[ "$title" = "\"ニコニコ動画\"" ] && printf "Invalid result\033[0m\n" && exit
###echo "a:$title:a"
[ "$linking" = "1" ] && unset s && return
case "$diff" in
	sm) s="${URL##*/sm}"
	;;
	so) s="${URL##*/so}"
	;;
	nm) s="${URL##*/nm}"
	;;
esac
###echo "a:$s:a"
###echo "a:$diff:a"
q1="$(grep -m 1 "${diff}${s}" $file_h)"
q2="$(printf "%s" "$q1" | sed "s/\[//")"
q3="$(printf "%s" "$q2" | sed "s/\]//")"
m1="${q3##*= }"
m2="$(printf "%s" "$q1" | sed "s/.*\[//g")"
m3="$(printf "%s" "$m2" | sed "s/\].*//g")"
position="${q3%% =*}"
fav1="${m1%%      -        $title}"
fav2="${fav1##$m3}"
if [ "$fav2" = ":*" ]; then
Add_fav="${yellow}Delete from favourites[a]?\n"
fav3=1
else
Add_fav="${yellow}Add to favourites[a]?\n"
fav3=0
fi
[ "${diff}${s}" = "$m3" ] && match=1 || match=0
###echo "a:$q1:a"
###echo "a:$q2:a"
###echo "a:$q3:a"
###echo "a:$m1:a"
###echo "a:$m2:a"
###echo "a:$m3:a"
###echo "a:$position:a"
###echo "a:$fav1:a"
###echo "a:$fav2:a"
###echo "a:$fav3:a"
###echo "a:$diff$s:a"
###echo "a:$match:a"
}

###Handling history###

clean_tmp () {
	 cat "$file_h_tmp" > "$file_h" && rm "$file_h_tmp"
}

making_history () {
	[ "$protection" = "1" ] && protect_history
	if [ "$match" = "1" ]; then
	n1="$(uniq $file_h | wc -l)" && switching
	$1
	elif [ "$linking" = "0" ];then
	n2="$(($(uniq $file_h | wc -l)+1))" && printf "$n2 = [$diff$s]        -        $title" >> "$file_h" && sort -g "$file_h" > "$file_h_tmp" && clean_tmp
	$1
	else
	$1
	fi
}

switching () {
	z="$n1"
	while [ "$z" -gt "$position" ]; do
	###echo "aaaaa"
	sed "0,/$z =/ s//$(($z-1)) =/" "$file_h" > "$file_h_tmp" && clean_tmp
	###echo "a:$(($z-1)):$n1:a"
	z="$((z-=1))"
	done
	###cat $file_h >> url_check_file
	###echo "a:$position:a"
	###echo "a:$n1:a"
	sed "0,/$position =/ s//$n1 =/" "$file_h" | sort -g > "$file_h_tmp" && clean_tmp
	###cat $file_h >> url_check_file
}

#####################


###Main operations###

watching () {
	nohup $( yt-dlp -q -o - "$URL" 2>/dev/null | mpv --no-terminal --force-media-title="$title" - ) > /dev/null 2>&1 & 
}

watching_f () {
	nohup $( yt-dlp -q -f "$quality" -o - "$URL" 2>/dev/null | mpv --no-terminal --force-media-title="$title" - ) > /dev/null 2>&1 & 
}

formating () {
	yt-dlp -F "$URL"
}

downloading () {
	yt-dlp "$URL"
}

downloading_f () {
	yt-dlp -f "$quality" "$URL"
}

watch () {
[ "$prompt_big" = "1" ] && url_check
[ "$nicov_history" = "1" ] && cleaning
[ "$searched" = "1" ] && cleaning
if [ -n "$quality" ];then
	making_history watching_f
else
	making_history watching
fi
replay=1
nicov_history=0
af=0
searched=0
switch=0
[ "$non_stop" = "0" ] && big_prompt
}

download () {
[ "$prompt_big" = "1" ] && url_check
[ "$nicov_history" = "1" ] && cleaning
[ "$searched" = "1" ] && cleaning
searched=0
if [ -n "$quality" ];then
	making_history downloading_f
else
	making_history downloading
fi
replay=0
big_prompt
}

format () {
[ "$prompt_big" = "1" ] && url_check
[ "$nicov_history" = "1" ] && cleaning
[ "$searched" = "1" ] && cleaning
searched=0
making_history formating
replay=0
big_prompt
}

ask_format () {
	printf "What format do you want?\n" && printf "> " && read quality
	format_change=1
	replay=0
	printf "Quality set to: $quality\n"
	divider
	big_prompt
}

hist () {
cleaning
divider
while read -r hist; do
	printf "${white}%s\n" "$hist"
done < "$file_h"
[ ! -s "$file_h" ] && printf "There is nothing here\n"
nicov_history=1
replay=0
if [ "$hist_result" = "0" ]; then
printf "${yellow}Continue[c]?\n${red}Quit[q]?\n${magenta}"
printf "> " && read hist_opt
case "$hist_opt" in
	c) cleaning && return 0
	;;
	q) bye
	;;
	''|*[!0-9]*) die
	;;
	*)
	hist_choice1="$(grep -m 1 "$hist_opt = \[" "$file_h" | sed "s/$hist_opt = \[//; s/\].*//" )"
	hist_choice2="$(printf "%s" "$hist_choice1" | cut -c1,2)"
	hist_choice3="$(printf "%s" "$hist_choice1" | sed "s/$hist_choice2//g")"
	###echo "a:$hist_choice1:a"
	###echo "a:$hist_choice2:a"
	###echo "a:$hist_choice3:a"
	###echo "a:$x:a"
	###echo "a:$URL:a"
	case "$hist_choice2" in
		sm) x=0
		;;
		so) x=1
		;;
		nm) x=2
		;;
		*) printf "Invalid result\033[0m\n" && exit
		;;
	esac
	;;
esac
cleaning
url_make "$hist_choice3"
url_check
else
divider
fi
}

add_fav () {
	if [ "$fav3" = "0" ]; then
		if [ "$match" = "1" ]; then
		sed "s/\[$m3\]  /\[$m3\]:*/" "$file_h" > "$file_h_tmp" && clean_tmp
		elif [ "$linking" = "0" ];then
		printf "$(($(uniq "$file_h" | wc -l)+1)) = [$diff$s]:*      -        $title" >> "$file_h" && sort -g "$file_h" > "$file_h_tmp" && clean_tmp
		else
		printf "Cannot add link to favourites, because history doesn't store them\n" && af=1 && replay=0 && return 0
		fi && printf "Added to favourites\n"
	elif [ "$fav3" = "1" ] && [ "$match" = "1" ]; then
		sed "s/\[$m3\]:\*/\[$m3\]  /" "$file_h" > "$file_h_tmp" && clean_tmp
		printf "Deleted from favourites\n"
	else
		printf "Somehow cannot edit\n"
	fi
	divider
	af=1
	replay=0
	url_check
}

###curl -s "https://www.nicovideo.jp/search/$quest?ref=" -L | grep "thumbnails" | sed "s/.*thumbnails\//[/g; s/\/.*alt=/]---/g; s/\" data-thumbnail.*/\"/gi; s/.*watch.*//g"
search () {
cleaning
divider
printf "${magenta}Search?\n"
printf "> " && read -r quest
quest="$(printf "%s" "$quest" | sed "s/ /%20/g")"
#curl -s "https://www.nicovideo.jp/search/$quest?ref=" -L | grep "data-original=\"https:\/\/nicovideo.cdn.nimg.jp\/thumbnails\/" | sed "s/.*data-original=\"https:\/\/nicovideo.cdn.nimg.jp\/thumbnails\//[/g; s/\/.*alt=/]  -  /g; s/\" data-thumbnail.*/\"/g" #; s/.*watch.*//g"
if [ "$search_result" = "0" ]; then
search1
else
curl -s "https://www.nicovideo.jp/search/$quest?ref=" | grep "<a title=" | sed "s/.*title=\"/\"/; s/href=\"\/watch\//[/; s/\" data-href.*/]/" && divider
fi
###echo "a:$quest:a"
replay=0
searched=1
}

search1 () {
curl -s "https://www.nicovideo.jp/search/$quest?ref=" | grep "<a title=" | sed "s/.*title=\"/\"/; s/href=\"\/watch\//[/; s/\" data-href.*/]/" > "$file_tmp"
r=1
while read -r searching; do
	[ "$((r%2))" = "1" ] && printf "${magenta}$r) ${yellow}%s\n" "$searching" || printf "${magenta}$r) ${cyan}%s\n" "$searching"
	r="$((r+1))"
done < "$file_tmp"
[ ! -s "$file_tmp" ] && printf "There is nothing here\n"
printf "${yellow}Continue[c]?\n${red}Quit[q]?\n${magenta}"
printf "> " && read p
case "$p" in
	c) rm "$file_tmp" && cleaning && return 0
	;;
	q) rm "$file_tmp" && bye
	;;
	''|*[!0-9]*) rm "$file_tmp" && die
	;;
	*)
	###echo "a:$p:a"
	get_url1="$(sed "$p!d; $p s/\".*\"//; s/ \[//; s/\]//" "$file_tmp")"
	###echo "a:${get_url1}:a"
	get_url2="$(printf "%s" "$get_url1" | cut -c1,2)"
	###echo "a:${get_url2}:a"
	case "$get_url2" in
		sm) x=0
		;;
		so) x=1
		;;
		nm) x=2
		;;
		*) printf "Invalid result\033[0m\n" && rm "$file_tmp" && exit
		;;
	esac
	r="$(printf "%s" "$get_url1" | sed "s/$get_url2//g")"
	###echo "a:$r:a"
	###echo "a:$x:a"
	;;
esac
cleaning
rm "$file_tmp"
url_make $r
url_check
}
####################

##check input
answer () {
	case "$1" in
		$2)
		;;
		$3)
		;;
		$4)
		;;
		$5)
		;;
		$6)
		;;
		$7)
		;;
		$8)
		;;
		$9)
		;;
		${10})
		;;
		${11})
		;;
		${12})
		;;
		*) die
		;;
	esac
} 

###After handling prompt###

big_prompt () {
prompt_big=1
[ ! "$format_change" = "1" ] && [ ! "$af" = "1" ] && video_info
format_change=0
af=0
[ ! "$loop" = "0" ] && [ "$i" -gt "1" ] && [ "$i" -le "$((${#arr}/8))" ] && Previous="${magenta}Previous[p]?\n" || Previous=""

if [ "$replay" = "1" ] && [ ! "$loop" = "0" ]; then
	printf "${Previous}$Replay$Next$Download$Format$Format_change$Switch$History$Add_fav$Search$Quit${magenta}"
elif [ ! "$loop" = "0" ]; then
	printf "${Previous}$Watch2$Next$Download$Format$Format_change$Switch$History$Add_fav$Search$Quit${magenta}"
elif [ "$replay" = "1" ]; then
	printf "$Replay$Download$Format$Format_change$Switch$History$Add_fav$Search$Quit${magenta}"
else
	printf "$Watch2$Download$Format$Format_change$Switch$History$Add_fav$Search$Quit${magenta}"
fi

###echo "a:$i:a"
printf "> " && read a
if [ "$loop" = "0" ]; then
	if [ "$replay" = "1" ]; then
		answer "$a" "r" "d" "f" "c" "u" "h" "a" "s" "q"
	else
		answer "$a" "w" "d" "f" "c" "u" "h" "a" "s" "q" && [ "$a" = "w" ] && a="r"
	fi
fi
##starts checking loop
if [ ! "$loop" = "0" ]; then
	if [ "$replay" = "1" ] && [ "$i" -gt "1" ] && [ "$i" -le "$((${#arr}/8))" ]; then
		answer "$a" "p" "r" "n" "d" "f" "c" "u" "h" "a" "s" "q"
	elif [ "$i" -gt "1" ] && [ "$i" -le "$((${#arr}/8))" ]; then
		answer "$a" "p" "w" "n" "d" "f" "c" "u" "h" "a" "s" "q" && [ "$a" = "w" ] && a="r"
	elif [ "$replay" = "1" ]; then
		answer "$a" "r" "n" "d" "f" "c" "h" "u" "a" "s" "q"
	else
		answer "$a" "w" "n" "d" "f" "c" "h" "u" "a" "s" "q" && [ "$a" = "w" ] && a="r"
	fi
fi

###echo "a:$a:a"
[ ! "$loop" = "0" ] && [ "$a" = "p" ] && pre=1
case "$a" in
	r) cleaning && watch
	;;
	d) cleaning && download
	;;
	f) cleaning && format
	;;
	c) ask_format
	;;
	u) url_type "$s" && switch=1 && replay=0 && ask_URL && cleaning && big_prompt
	;;
	h) hist && big_prompt
	;;
	a) url_check && add_fav && big_prompt
	;;
	s) search && big_prompt
	;;
	q) bye
	;;
esac
###echo "a:$a:a"

}
###########################

prompt_operation () {
case "$y" in
	w) $1
	;;
	f) $2
	;;
	d) $3
	;;
	h) $4
	[ -n "$x" ] && [ "$loop" = "0" ] && video_info
	prompt
	if [ ! "$loop" = "0" ] || [ "$search_result" = "0" ] || [ "$hist_result" = "0" ] && [ -n "$x" ]; then
	###echo "a:$x:a"
	prompt_operation watch format download hist search
	else
	prompt_operation url_type url_type url_type hist search
	fi
	;;
	s) [ "$search_result" = "1" ] && [ "$prompt_big" = "0" ] && die
	$5
	[ "$prompt_big" = "0" ] && [ "$loop" = "0" ] && [ -n "$x" ] && video_info
	prompt
	if [ ! "$loop" = "0" ] || [ "$search_result" = "0" ] || [ "$hist_result" = "0" ] && [ -n "$x" ]; then
	###echo "a:$x:a"
	prompt_operation watch format download hist search
	else
	prompt_operation url_type url_type url_type hist search
	fi
	;;
	q) bye
	;;
	*) die
	;;
	esac
}

url_type () {
[ ! "$nicov_history" = "1" ] && [ ! "$searched" = "1" ] && cleaning
printf "Got it!\n"
[ "$loop" = "1" ] && printf "${yellow}Sm[0]?\n${cyan}So[1]?\n${yellow}Nm[2]?\n${magenta}" ||  printf "${yellow}Sm[0]?\n${cyan}So[1]?\n${yellow}Nm[2]?\n${cyan}Link[3]?\n${magenta}"
printf "> " && read x
url_make "$1"
}

ask_URL () {
printf "$question${magenta}> "
read z
url_make "$z"
url_check
#[ "$z" = "q" ] && exit
}

prompt () {
[ ! "$loop" = "0" ] && video_info
[ "$search_result" = "0" ] && printf "$Watch$Format$Download$History$Search$Quit${magenta}" || printf "$Watch$Format$Download$History$Quit${magenta}"
printf "> " && read y
}

cleaning () {
[ "$clean" = "0" ] && printf "\033[2J\033[0;0H"
return 0
}

divider () {
printf "${red}************${magenta}\n"
}

video_info () {
		if [ "$linking" = "0" ]; then
		divider
		[ ! "$loop" = "0" ] && printf "${magenta}$i/${positions}\n"
		[ -n "$s" ] && printf "${red}##${magenta}${diff}${s}${red}##\n"
		divider
		printf "${magenta}$title\n"
		divider
		fi
}

Loop () {
	i=1
	current="Invalid loop args"
	positions="$( printf "%s" "$arr" | awk -F"," '{print NF }')"
	###echo "$positions"
	while [ -n "$current" ]; do
		###echo "a:$pre:a"
		###echo "a:$previus check"
		[ "$pre" = 0 ] && [ "$i" -gt "$positions" ] && break
		[ ! "$pre" = 0 ] && i="$((i-2))"
		current="$( printf "$arr" | tr ',' '\n' | awk -v "i=$i" '{ arr[NR]= $0 } END { print arr[i] }' )"
		diff="$( printf "%s" "$current" | cut -c1,2 )"
		case "$diff" in
			sm) x=0
			current="${current##*sm}"
			;;
			so) x=1
			current="${current##*so}"
			;;
			nm) x=2
			current="${current##*nm}"
			;;
			*) unset diff
			misses_diff=1
			;;
		esac
		###echo "$diff"
		printf "${magenta}"
		###echo "$current"
		[ -z "$diff" ] && url_type "$current" || url_make "$current"
[ "$misses_diff" = "1" ] && new_entry="$( printf "%s" "$arr" | tr ',' '\n' | awk -v "diff=$diff" -v "i=$i" '{ arr[NR]= $0 } END { print diff arr[i] }' )" && arr="$( printf "%s" "$arr" | sed "s/$current/$new_entry/" )" && misses_diff=0
		###echo "$new_entry"
		###echo "$arr"
		[ ! "$pre" = "0" ] && pre=0
		url_check
		cleaning
		if [ "$non_stop" = "0" ]; then
		big_prompt
		else
		y="w"
		finalizing
		fi
		format_change=0
		nicov_history=0
		af=0
		prompt_big=0
		switch=0
		i="$((i+=1))"
	done
}

finalizing () {
	prompt_operation watch format download hist search
}

bye () {
	printf "$goodbye\033[0m"
	exit
}

###START!###

cleaning

[ "$loop" = "1" ] && Loop && cleaning
non_stop=0
loop=0
unset x
##asking operation to perform
[ ! "$clean" = "0" ] && divider
prompt
##checking y
prompt_operation url_type url_type url_type hist search
##asking info for URL
ask_URL
finalizing
bye
###END!###
