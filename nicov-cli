#!/bin/bash

##default variables#
version="1.7" ##version bump up, but i am not sure whether changes are good or bad
##next bump up, looks cleaner probably, some functions have been added
##bump up, history now is chronologic, favourites added
##bump up, tried some sed and curl stuff and now there is search option, only that but it is probably worth it
##yet again bump up, but with cost of readability of that script
##bump up, code is supposed to be cleaner now plus delete history options
##bump up, because i completed "to do" list and don't have any more ideas
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
blue="\033[1;34m"
magenta="\033[1;35m"
cyan="\033[1;36m"
white="\033[1;37m"
URL=""
clean=0
nicov_history=0
loop=0
non_stop=0
arr=
pre=0
replay=0
downloaded=0
form=0
change=0
switch=0
af=0
searched=0
###
match=0
#dir=$HOME/.cache
#file_h=$dir/.nicov_history
#file_h_tmp=$dir/.nicov_history_cache
#file_tmp=$dir/.nicov_cache
#[ -d "$dir" ] || mkdir "$dir"
file_h=$HOME/.nicov_history
file_h_tmp=$HOME/.nicov_history_cache
file_tmp=$HOME/.nicov_cache
[ -f "$file_h" ] || > "$file_h"
dep_exist=0
so_URL=0
nm_URL=0
linking=0
prompt2=0
search_result=0
hist_result=0
fav3=0
###
Sm="${yellow}Sm?\n"
So="${cyan}So?\n"
Nm="${yellow}Nm?\n"
Link="${cyan}Link?\n"
Previous=""
Watch="${green}Watch[w]?\n"
Watch2="${cyan}Watch[w]?\n"
Replay="${cyan}Replay[r]?\n"
Next="${green}Next[n]?\n"
Download="${yellow}Download[d]?\n"
Format="${blue}Format[f]?\n"
Format_change="${white}Change format[c]?\n"
Switch="${green}Change URL[u]?\n"
History="${cyan}History[h]?\n"
Add_fav="${yellow}Add to favourites[a]?\n"
Search="${magenta}Search[s]?\n"
Quit="${red}Quit[q]?\n"
goodbye="${magenta}\nThanks for your cooperation\n\033[0m"
###################

###dev tools
###inf="Not working"
###*

##to do(maybe):
##play from history(don't know whether it is necessary,
##because it can be just chosen and copied) #done
##watch non-stop for playlist #done

help_text () {

	while read -r line; do
		printf "$red%s\n" "$line"
	done <<-EOF
	
	USAGE:
	
	NAZWA [-q FORMAT] [-p SM,SM,SM,(...) | [SM][SM][SM](...)] -c -s -S
	NAZWA [-q FORMAT] [-p SM,SM,SM,(...) | [SM][SM][SM](...)] -w -c -s -S
	NAZWA -h | -V | -d | -D
	
	NAZWA = "${0##*/}" or "./${0##*/}" or "$0"
	
	OPTIONS:
	-h print this usage and exit
	-V print version information and exit
	-d deletes specific entry from history
	-D deletes whole history
	-q set quality video (ID)
	-p get many sm or so or nm (playlist like)
	-w play videos from "p" option without menus (require "p" option to work)
	-c unable screen cleaning (without it screen is being cleaned by default)
	-s turns off function to choose video from search results
	-S turns off function to choose video from history
	
	When changing format, while program runs,
	if you press enter without writing anything
	quality will stay default
	EOF
}

info () {
	printf "$magenta%s \033[0m\n" "$1"
}

die () {
	help_text
	printf "\033[0m\n"
	exit
}

dependencies=( "curl" "sed" "grep" "cat" "wc" "printf" "read" "sort" "uniq" "command" "mpv" "yt-dlp" )

dep_check () {
	for dependency; do
	if ! command -v "$dependency" > /dev/null; then
		printf "${red}Missing dependency: $dependency\033[0m\n"
		dep_exist=1
	fi
	done
	[ $dep_exist != 0 ] && exit
}

dep_check ${dependencies[@]}

###Options handling###

while getopts 'p:cwdDsSq:hV' OPT; do
	case $OPT in
		h) die
		;;
		V) info "Version: $version"
		exit
		;;
		q) if [ $OPTARG ]; then
		quality=$OPTARG
		else
		die
		fi
		;;
		c) clean=1
		;;
		p) arr=${OPTARG[@]}
		loop=1
		;;
		s) search_result=1
		;;
		S) hist_result=1
		;;
		w) non_stop=1
		;;
		d) while read -r hist; do
		printf "$white%s\n" "$hist"
		done < $file_h
		printf "${magenta}Which one to delete?\n"
		read -p "> " del_num
			case $del_num in
			''|*[!0-9]*) die
			;;
			*)
			sed "$del_num d" $file_h > $file_h_tmp && cat $file_h_tmp > $file_h && rm $file_h_tmp
			n1=$(uniq $file_h | wc -l)
			for (( z = $(($n1+1)); z > $del_num; z-- ));
			do
			###echo "aaaaa"
			sed "0,/$z =/ s//$(($z-1)) =/" $file_h > $file_h_tmp && cat $file_h_tmp > $file_h && rm $file_h_tmp
			###echo "$(($z-1)):$n1"
			done
			;;
			esac
		printf "\033[0m"
		exit
		;;
		D) [ -f "$file_h" ] && rm $file_h && printf "${magenta}History deleted\n"
		printf "\033[0m"
		exit
		;;
		*) die
		;;
	esac
done

[ $non_stop == 1 ] && [ $loop == 0 ] &&  printf "${magenta}\nWorks only with \"p\" option\n" && die

arr=${arr//,/}
arr=${arr//\[/}
arr=${arr//\]/}
arr=${arr//\:/}
arr=${arr//\*/}
arr=${arr//sm/}
arr=${arr//so/}
arr=${arr//nm/}
###echo $arr
######################

address_type () {
case $x in
	0) question="$Sm"
	URL="https://www.nicovideo.jp/watch/sm$1"
	so_URL=0
	nm_URL=0
	linking=0
	;;
	1) question="$So"
	URL="https://www.nicovideo.jp/watch/so$1"
	so_URL=1
	nm_URL=0
	linking=0
	;;
	2) question="$Nm"
	URL="https://www.nicovideo.jp/watch/nm$1"
	nm_URL=1
	so_URL=0
	linking=0
	;;
	3) [ $loop != 0 ] && die
	question="$Link"
	URL=$1
	so_URL=0
	nm_URL=0
	linking=1
	match=0
	;;
	*) die
	;;
	esac
}

url_check () {
###echo "$URL:a"
title=$(curl -s "$URL" | grep "property=\"og:title\"" | sed "s/.*content=//; s/\">/\"/")
title=${title%\"*}
title=$title\"
[ "$title" == "\"ニコニコ動画\"" ] && printf "Invalid result\033[0m\n" && exit
###echo "$title:a"
[ $linking == 1 ] && unset s && return
if [ $so_URL == $nm_URL ]; then
diff="sm"
s=${URL##*/sm}
elif [ $so_URL == 1 ]; then
diff="so"
s=${URL##*/so}
else
diff="nm"
s=${URL##*/nm}
fi
###echo "$s:a"
###echo "$diff:a"
q1=$(grep "$s" $file_h)
q2=${q1/\[/}
q3=${q2/\]/}
m1=${q3##*= }
m2=${q1//*\[/}
m3=${m2//\]*/}
position=${q3%% =*}
fav1=${m1%%      -        $title}
fav2=${fav1##$m3}
if [ "$fav2" == ":*" ]; then
Add_fav="${yellow}Delete from favourites[a]?\n"
fav3=1
else
Add_fav="${yellow}Add to favourites[a]?\n"
fav3=0
fi
[ "$diff$s" == "$m3" ] && match=1 || match=0
###echo "$q1:a"
###echo "$q2:a"
###echo "$q3:a"
###echo "$m1:a"
###echo "$m2:a"
###echo "$m3:a"
###echo "$position:a"
###echo "$fav1:a"
###echo "$fav2:a"
###echo "$fav3:a"
###echo "$diff$s:a"
###echo "$match:a"
}

###Handling history###

clean_tmp () {
	 cat $file_h_tmp > $file_h && rm $file_h_tmp
}

making_history () {
	if [ $match == 1 ]; then
	$1 && n1=$(uniq $file_h | wc -l) && switching && sort -g $file_h > $file_h_tmp && clean_tmp
	elif [ $linking == 0 ];then
	$1 && n2=$(($(uniq $file_h | wc -l)+1)) && printf "$n2 = [$diff$s]        -        $title" >> $file_h && sort -g $file_h > $file_h_tmp && clean_tmp
	else
	$1
	fi
}

switching () {
	for (( z = $n1; z > $position; z-- ));
	do
	###echo "aaaaa"
	sed "0,/$z =/ s//$(($z-1)) =/" $file_h > $file_h_tmp && clean_tmp
	###echo "$(($z-1)):$n1"
	done
	###cat $file_h >> url_check_file
	###echo "$position:a"
	###echo "$n1:a"
	sed "0,/$position =/ s//$n1 =/" $file_h > $file_h_tmp && clean_tmp
	###cat $file_h >> url_check_file
}

#####################


###Main operations###

watching () {
	yt-dlp -o - "$URL" | mpv - 
}

watching_f () {
	yt-dlp -f $quality -o - "$URL" | mpv -
}

formating () {
	yt-dlp -F $URL
}

downloading () {
	yt-dlp $URL
}

downloading_f () {
	yt-dlp -f $quality $URL
}

watch () {
[ $prompt2 == 1 ] && url_check
[ $nicov_history == 1 ] && cleaning
[ $searched == 1 ] && cleaning
if [ $quality ];then
	making_history watching_f
else
	making_history watching
fi
replay=1
nicov_history=0
af=0
searched=0
switch=0
[ $non_stop == 0 ] && watch_asking
}

download () {
[ $prompt2 == 1 ] && url_check
[ $nicov_history == 1 ] && cleaning
[ $searched == 1 ] && cleaning
searched=0
if [ $quality ];then
	making_history downloading_f
else
	making_history downloading
fi
replay=0
watch_asking
}

format () {
[ $prompt2 == 1 ] && url_check
[ $nicov_history == 1 ] && cleaning
[ $searched == 1 ] && cleaning
searched=0
making_history formating
replay=0
watch_asking
}

ask_format () {
	printf "What format do you want?\n" && read -p "> " quality
	change=1
	replay=0
	printf "Quality set to: $quality\n"
	watch_asking
}

hist () {
cleaning
divider
while read -r hist; do
	printf "$white%s\n" "$hist"
done < $file_h
nicov_history=1
replay=0
if [ $hist_result == 0 ]; then
printf "${yellow}Continue[c]?\n${red}Quit[q]?\n${magenta}"
read -p "> " hist_opt
case $hist_opt in
	c) cleaning && return 0
	;;
	q) bye
	;;
	''|*[!0-9]*) die
	;;
	*)
	hist_choice1=$( grep "$hist_opt = \[" $file_h | sed "s/$hist_opt = \[//; s/\].*//" )
	hist_choice2=${hist_choice1:0:2}
	hist_choice3=${hist_choice1//$hist_choice2/}
	###echo "$hist_choice1:a"
	###echo "$hist_choice2:a"
	###echo "$hist_choice3:a"
	###echo $x $URL
	case $hist_choice2 in
		sm) x=0
		;;
		so) x=1
		;;
		nm) x=2
		;;
		*) printf "Invalid result\033[0m\n" && exit
		;;
	esac
	;;
esac
cleaning
address_type $hist_choice3
url_check
else
divider
fi
}

add_fav () {
	if [ $fav3 == 0 ]; then
		if [ $match == 1 ]; then
		sed "s/\[$m3\]  /\[$m3\]:*/" $file_h > $file_h_tmp && clean_tmp
		elif [ $linking == 0 ];then
		printf "$(($(uniq $file_h | wc -l)+1)) = [$diff$s]:*      -        $title" >> $file_h && sort -g $file_h > $file_h_tmp && clean_tmp
		else
		printf "Cannot add link to favourites, because history don't store them\n" && af=1 && replay=0 && return 0
		fi && printf "Added to favourites\n"
	elif [ $fav3 == 1 ] && [ $match == 1 ]; then
		sed "s/\[$m3\]:\*/\[$m3\]  /" $file_h > $file_h_tmp && clean_tmp
	fi
	divider
	af=1
	replay=0
	url_check
}

###curl -s "https://www.nicovideo.jp/search/$quest?ref=" -L | grep "thumbnails" | sed "s/.*thumbnails\//[/g; s/\/.*alt=/]---/g; s/\" data-thumbnail.*/\"/gi; s/.*watch.*//g"
search () {

	af=1
	replay=0
	url_check
}

###curl -s "https://www.nicovideo.jp/search/$quest?ref=" -L | grep "thumbnails" | sed "s/.*thumbnails\//[/g; s/\/.*alt=/]---/g; s/\" data-thumbnail.*/\"/gi; s/.*watch.*//g"
search () {
cleaning
divider
printf "${magenta}Search?\n"
read -rp "> " quest
quest=${quest// /%20}
#curl -s "https://www.nicovideo.jp/search/$quest?ref=" -L | grep "data-original=\"https:\/\/nicovideo.cdn.nimg.jp\/thumbnails\/" | sed "s/.*data-original=\"https:\/\/nicovideo.cdn.nimg.jp\/thumbnails\//[/g; s/\/.*alt=/]  -  /g; s/\" data-thumbnail.*/\"/g" #; s/.*watch.*//g"
if [ $search_result == 0 ]; then
search1
cleaning
else
curl -s "https://www.nicovideo.jp/search/$quest?ref=" | grep "<a title=" | sed "s/.*title=\"/\"/; s/href=\"\/watch\//[/; s/\" data-href.*/]/" && divider
fi
###echo $quest
replay=0
searched=1
}

search1 () {
curl -s "https://www.nicovideo.jp/search/$quest?ref=" | grep "<a title=" | sed "s/.*title=\"/\"/; s/href=\"\/watch\//[/; s/\" data-href.*/]/" > $file_tmp
r=1
while read -r searching; do
	[ $((r%2)) == 1 ] && printf "${magenta}$r) ${yellow}%s\n" "$searching" || printf "${magenta}$r) ${cyan}%s\n" "$searching"
	r=$((r+1))
done < $file_tmp
printf "${yellow}Continue[c]?\n${red}Quit[q]?\n${magenta}"
read -p "> " p
case $p in
	c) rm $file_tmp && return 0
	;;
	q) rm $file_tmp && bye
	;;
	''|*[!0-9]*) rm $file_tmp && die
	;;
	*)
	###echo $p
	get_url1="$(sed "$p!d; $p s/\".*\"//; s/\[//; s/\]//" $file_tmp)"
	###echo ${get_url1}
	get_url2=${get_url1:1:2}
	case $get_url2 in
		sm) x=0
		;;
		so) x=1
		;;
		nm) x=2
		;;
		*) printf "Invalid result\033[0m\n" && exit
		;;
	esac
	r=${get_url1//$get_url2/}
	###echo $r
	###echo $x
	;;
esac
rm $file_tmp
address_type $r
url_check
[ $prompt2 == 0 ] && [ $loop == 0 ] && video_info
}
####################

##check input
answer () {
	case $1 in
		$2)
		;;
		$3)
		;;
		$4)
		;;
		$5)
		;;
		$6)
		;;
		$7)
		;;
		$8)
		;;
		$9)
		;;
		${10})
		;;
		${11})
		;;
		${12})
		;;
		*) die
		;;
	esac
} 

###After handling prompt###

watch_asking () {
prompt2=1
[ $change != 1 ] && [ $af != 1 ] && video_info
change=0
af=0
[ $loop != 0 ] && [ $i -gt 1 ] && [ $i -le $((${#arr}/8)) ] && Previous="${magenta}Previous[p]?\n" || Previous=""

if [ $replay == 1 ] && [ $loop != 0 ]; then
	printf "${Previous}$Replay$Next$Download$Format$Format_change$Switch$History$Add_fav$Search$Quit${magenta}"
elif [ $loop != 0 ]; then
	printf "${Previous}$Watch2$Next$Download$Format$Format_change$Switch$History$Add_fav$Search$Quit${magenta}"
elif [ $replay == 1 ]; then
	printf "$Replay$Download$Format$Format_change$Switch$History$Add_fav$Search$Quit${magenta}"
else
	printf "$Watch2$Download$Format$Format_change$Switch$History$Add_fav$Search$Quit${magenta}"
fi

###echo $i
read -p "> " a
if [ $loop == 0 ]; then
	if [ $replay == 1 ]; then
		answer $a r d f c u h a s q
	else
		answer $a w d f c u h a s q && [ $a == "w" ] && a="r"
	fi
fi
##starts checking loop
if [ $loop != 0 ]; then
	if [ $replay == 1 ] && [ $i -gt 1 ] && [ $i -le $((${#arr}/8)) ]; then
		answer $a p r n d f c u h a s q
	elif [ $i -gt 1 ] && [ $i -le $((${#arr}/8)) ]; then
		answer $a p w n d f c u h a s q && [ $a == "w" ] && a="r"
	elif [ $replay == 1 ]; then
		answer $a r n d f c h u a s q
	else
		answer $a w n d f c h u a s q && [ $a == "w" ] && a="r"
	fi
fi

###echo $a
[ $loop != 0 ] && [ $a == "p" ] && pre=1
case $a in
	r) cleaning && watch
	;;
	d) cleaning && download
	;;
	f) cleaning && format
	;;
	c) ask_format
	;;
	u) correct $s && switch=1 && replay=0 && ask_URL && cleaning && watch_asking
	;;
	h) hist && watch_asking
	;;
	a) url_check && add_fav && watch_asking
	;;
	s) search && watch_asking
	;;
	q) bye
	;;
esac
###echo $a

}
###########################

operation () {
case $y in
	w) $1
	;;
	f) $2
	;;
	d) $3
	;;
	h) $4
	[ -n "$x" ] && [ $loop == 0 ] && video_info
	prompt
	if [ $loop != 0 ] || [ $search_result == 0 ] || [ $hist_result == 0 ] && [ -n "$x" ]; then
	###echo "$x"
	operation watch format download hist search
	else
	operation correct correct correct hist search
	fi
	;;
	s) [ $search_result == 1 ] && [ $prompt2 == 0 ] && die
	$5
	prompt
	if [ $loop != 0 ] || [ $search_result == 0 ] || [ $hist_result == 0 ] && [ -n "$x" ]; then
	###echo "$x"
	operation watch format download hist search
	else
	operation correct correct correct hist search
	fi
	;;
	q) bye
	;;
	*) die
	;;
	esac
}

correct () {
[ $nicov_history != 1 ] && [ $searched != 1 ] && cleaning
printf "Got it!\n"
[ $loop == 1 ] && printf "${yellow}Sm[0]?\n${cyan}So[1]?\n${yellow}Nm[2]?\n${magenta}" ||  printf "${yellow}Sm[0]?\n${cyan}So[1]?\n${yellow}Nm[2]?\n${cyan}Link[3]?\n${magenta}"
read -p "> " x
address_type $1
}

prompt () {
[ $loop != 0 ] && video_info
[ $search_result == 0 ] && printf "$Watch$Format$Download$History$Search$Quit${magenta}" || printf "$Watch$Format$Download$History$Quit${magenta}"
read -p "> " y
}

cleaning () {
[ $clean == 0 ] && printf "\033[2J\033[0;0H"
return 0
}

divider () {
printf "${red}************\n"
}

video_info () {
		if [ $linking == 0 ]; then
			divider
			[ $loop != 0 ] && printf "${magenta}$i/$((${#arr}/8))\n"
			
			if [ $loop != 0 ]; then
			printf "##$sm##\n"
			elif [ -n "$s" ]; then
			printf "##${magenta}$s${red}##\n"
			fi
		fi
		divider
		printf "${magenta}$title\n"
		divider
}

ask_URL () {
[ $switch != 0 ] && [ $linking != 1 ] && printf "Want to change further?\n${yellow}Yes[y]?\n${cyan}No[n]?\n${magenta}> " && read n && if [ "$n" != "y" ]; then 
return 0
fi
printf "$question${magenta}> "
read z
address_type $z
url_check
#[ $z == "q" ] && exit
}

finalizing () {
	operation watch format download hist search
}

bye () {
	printf "$goodbye\033[0m"
	exit
}

###START!###

cleaning

if [ $loop == 1 ]; then
	for (( i=1, j=0; i <= $((${#arr}/8+1)), j<=${#arr}; i+=1, j+=8 ));
		do
		###echo $pre
		###echo "$previus check"
		###printf "${magenta}$i\n"
		[ $pre == 0 ] && [ $i -gt $((${#arr}/8)) ] && break
		[ $pre != 0 ] && i=$((i-2)) && j=$((j-16))
		printf "${magenta}"
		sm=${arr:$j:8}
		[ $i == 1 ] && [ $pre == 0 ] && correct $sm || address_type $sm
		[ $pre != 0 ] && pre=0
		url_check
		cleaning
		[ $non_stop == 0 ] && prompt || y="w"
		finalizing
		change=0
		nicov_history=0
		af=0
		prompt2=0
		switch=0
		done
fi
non_stop=0
loop=0
unset x
##asking operation to perform
[ $clean != 0 ] && divider
prompt
##checking y
operation correct correct correct hist search
##asking info for URL
ask_URL
finalizing
bye
###END!###
